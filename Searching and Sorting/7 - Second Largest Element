Given a random integer array of size n, find and return the second largest element present in the array.
If n <= 1 or all elements are same in the array, return -2147483648 i.e. -2^31.
Input format :
Line 1 : Integer n (Array Size)
Line 2 : Array elements (separated by space)
Output Format :
Second largest element
Constraints :
1 <= N <= 10^6
Sample Input 1:
7
2 13 4 1 3 6 28
Sample Output 1:
13
Sample Input 2:
5
9 3 6 2 9
Sample Output 2:
6
Sample Input 3:
2
6 6
Sample Output 3:
-2147483648

Solution :

// arr - input array
// n - size of array
int* selection_sort(int arr[], int len)
{
    for(int i = 0; i < len - 1; i++)
    {
        int min = i;
        for(int k = i + 1; k < len; k++)
        {
            if(arr[k] < arr[min])
                min = k;
        }
        swap(arr[i], arr[min]);
    }
    return arr;
}

int FindSecondLargest(int arr[], int n)
{
    arr = selection_sort(arr, n);
    if((n <= 1) || (arr[0] == arr[n - 1]))
        return -2147483648;
    else
    {
        int ele = arr[n - 1];
        for(int i = n - 2; i >= 0; i--)
        {
            if(arr[i] != ele)
                return arr[i];
        }
    }
}
