Given a random integer array and a number x. Find and print the triplets of elements in the array which sum to x.
While printing a triplet, print the smallest element first.
That is, if a valid triplet is (6, 5, 10) print "5 6 10". There is no constraint that out of 5 triplets which have to be printed on 1st line. You can print triplets in any order, just be careful about the order of elements in a triplet.

Input format :
Line 1 : Integer N (Array Size)
Line 2 : Array elements (separated by space)
Line 3 : Integer x
Output format :
Line 1 : Triplet 1 elements (separated by space)
Line 2 : Triplet 3 elements (separated by space)
Line 3 : and so on

Constraints :
1 <= N <= 1000
1 <= x <= 100

Sample Input:
7
1 2 3 4 5 6 7 
12
Sample Output ;
1 4 7
1 5 6
2 3 7
2 4 6
3 4 5

Solution:

// x - sum of triplets
using namespace std;

void print(int a, int b, int c)
{
    if(a <= b && b <= c)
        cout << a << " " << b << " " << c;
    else if(a <= c && c <= b)
        cout << a << " " << c << " " << b;
    else if(b <= c && c <= a)
        cout << b << " " << c << " " << a;
    else if(b <= a && a <= c)
        cout << b << " " << a << " " << c;
    else if(c <= b && b <= a)
        cout << c << " " << b << " " << a;
    else if(c <= a && a <= b)
        cout << c << " " << a << " " << b;
}


void FindTriplet(int arr[], int size, int x) 
{
    for(int i = 0; i < size; i++)
    {
        for(int j = i + 1; j < size; j++)
        {
            for(int k = j + 1; k < size; k++)
            {
                if((arr[i] + arr[j] + arr[k]) == x)
                {
                    print(arr[i], arr[j], arr[k]);
                    cout << endl;
                }
                    
            }
        }
    }
}
